//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("nhmamnnk_LabnetManagerModel", "FK_InstrumentResult_Instrument", "Instrument", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(DataRepository.Instrument), "InstrumentResult", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DataRepository.InstrumentResult), true)]
[assembly: EdmRelationshipAttribute("nhmamnnk_LabnetManagerModel", "FK_InstrumentTest_Instrument", "Instrument", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(DataRepository.Instrument), "InstrumentTest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DataRepository.InstrumentTest), true)]
[assembly: EdmRelationshipAttribute("nhmamnnk_LabnetManagerModel", "FK_InstrumentResult_Test", "Test", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(DataRepository.Test), "InstrumentResult", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DataRepository.InstrumentResult), true)]
[assembly: EdmRelationshipAttribute("nhmamnnk_LabnetManagerModel", "FK_InstrumentTest_Test", "Test", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(DataRepository.Test), "InstrumentTest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DataRepository.InstrumentTest), true)]

#endregion

namespace DataRepository
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class LabnetCommunicationEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new LabnetCommunicationEntities object using the connection string found in the 'LabnetCommunicationEntities' section of the application configuration file.
        /// </summary>
        public LabnetCommunicationEntities() : base("name=LabnetCommunicationEntities", "LabnetCommunicationEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new LabnetCommunicationEntities object.
        /// </summary>
        public LabnetCommunicationEntities(string connectionString) : base(connectionString, "LabnetCommunicationEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new LabnetCommunicationEntities object.
        /// </summary>
        public LabnetCommunicationEntities(EntityConnection connection) : base(connection, "LabnetCommunicationEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Instrument> Instruments
        {
            get
            {
                if ((_Instruments == null))
                {
                    _Instruments = base.CreateObjectSet<Instrument>("Instruments");
                }
                return _Instruments;
            }
        }
        private ObjectSet<Instrument> _Instruments;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<InstrumentResult> InstrumentResults
        {
            get
            {
                if ((_InstrumentResults == null))
                {
                    _InstrumentResults = base.CreateObjectSet<InstrumentResult>("InstrumentResults");
                }
                return _InstrumentResults;
            }
        }
        private ObjectSet<InstrumentResult> _InstrumentResults;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<InstrumentTest> InstrumentTests
        {
            get
            {
                if ((_InstrumentTests == null))
                {
                    _InstrumentTests = base.CreateObjectSet<InstrumentTest>("InstrumentTests");
                }
                return _InstrumentTests;
            }
        }
        private ObjectSet<InstrumentTest> _InstrumentTests;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Test> Tests
        {
            get
            {
                if ((_Tests == null))
                {
                    _Tests = base.CreateObjectSet<Test>("Tests");
                }
                return _Tests;
            }
        }
        private ObjectSet<Test> _Tests;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Instruments EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToInstruments(Instrument instrument)
        {
            base.AddObject("Instruments", instrument);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the InstrumentResults EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToInstrumentResults(InstrumentResult instrumentResult)
        {
            base.AddObject("InstrumentResults", instrumentResult);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the InstrumentTests EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToInstrumentTests(InstrumentTest instrumentTest)
        {
            base.AddObject("InstrumentTests", instrumentTest);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Tests EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTests(Test test)
        {
            base.AddObject("Tests", test);
        }

        #endregion
        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="orderNumber">No Metadata Documentation available.</param>
        /// <param name="testId">No Metadata Documentation available.</param>
        /// <param name="value">No Metadata Documentation available.</param>
        /// <param name="instrumentPatientId">No Metadata Documentation available.</param>
        /// <param name="instrumentId">No Metadata Documentation available.</param>
        public int InstrumentResult(global::System.String orderNumber, Nullable<global::System.Int32> testId, global::System.String value, global::System.String instrumentPatientId, Nullable<global::System.Int32> instrumentId)
        {
            ObjectParameter orderNumberParameter;
            if (orderNumber != null)
            {
                orderNumberParameter = new ObjectParameter("OrderNumber", orderNumber);
            }
            else
            {
                orderNumberParameter = new ObjectParameter("OrderNumber", typeof(global::System.String));
            }
    
            ObjectParameter testIdParameter;
            if (testId.HasValue)
            {
                testIdParameter = new ObjectParameter("TestId", testId);
            }
            else
            {
                testIdParameter = new ObjectParameter("TestId", typeof(global::System.Int32));
            }
    
            ObjectParameter valueParameter;
            if (value != null)
            {
                valueParameter = new ObjectParameter("Value", value);
            }
            else
            {
                valueParameter = new ObjectParameter("Value", typeof(global::System.String));
            }
    
            ObjectParameter instrumentPatientIdParameter;
            if (instrumentPatientId != null)
            {
                instrumentPatientIdParameter = new ObjectParameter("InstrumentPatientId", instrumentPatientId);
            }
            else
            {
                instrumentPatientIdParameter = new ObjectParameter("InstrumentPatientId", typeof(global::System.String));
            }
    
            ObjectParameter instrumentIdParameter;
            if (instrumentId.HasValue)
            {
                instrumentIdParameter = new ObjectParameter("InstrumentId", instrumentId);
            }
            else
            {
                instrumentIdParameter = new ObjectParameter("InstrumentId", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("InstrumentResult", orderNumberParameter, testIdParameter, valueParameter, instrumentPatientIdParameter, instrumentIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="instrumentId">No Metadata Documentation available.</param>
        /// <param name="instrumentTestCode">No Metadata Documentation available.</param>
        public ObjectResult<GetTestIdByInstrumentAndInstrumentTestCode_Result> GetTestIdByInstrumentAndInstrumentTestCode(Nullable<global::System.Int32> instrumentId, global::System.String instrumentTestCode)
        {
            ObjectParameter instrumentIdParameter;
            if (instrumentId.HasValue)
            {
                instrumentIdParameter = new ObjectParameter("InstrumentId", instrumentId);
            }
            else
            {
                instrumentIdParameter = new ObjectParameter("InstrumentId", typeof(global::System.Int32));
            }
    
            ObjectParameter instrumentTestCodeParameter;
            if (instrumentTestCode != null)
            {
                instrumentTestCodeParameter = new ObjectParameter("InstrumentTestCode", instrumentTestCode);
            }
            else
            {
                instrumentTestCodeParameter = new ObjectParameter("InstrumentTestCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<GetTestIdByInstrumentAndInstrumentTestCode_Result>("GetTestIdByInstrumentAndInstrumentTestCode", instrumentIdParameter, instrumentTestCodeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="orderNumber">No Metadata Documentation available.</param>
        /// <param name="receivedDate">No Metadata Documentation available.</param>
        /// <param name="testId">No Metadata Documentation available.</param>
        /// <param name="value">No Metadata Documentation available.</param>
        /// <param name="instrumentResultId">No Metadata Documentation available.</param>
        public int Result(Nullable<global::System.Int32> orderNumber, Nullable<global::System.DateTime> receivedDate, Nullable<global::System.Int32> testId, global::System.String value, Nullable<global::System.Int32> instrumentResultId)
        {
            ObjectParameter orderNumberParameter;
            if (orderNumber.HasValue)
            {
                orderNumberParameter = new ObjectParameter("OrderNumber", orderNumber);
            }
            else
            {
                orderNumberParameter = new ObjectParameter("OrderNumber", typeof(global::System.Int32));
            }
    
            ObjectParameter receivedDateParameter;
            if (receivedDate.HasValue)
            {
                receivedDateParameter = new ObjectParameter("ReceivedDate", receivedDate);
            }
            else
            {
                receivedDateParameter = new ObjectParameter("ReceivedDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter testIdParameter;
            if (testId.HasValue)
            {
                testIdParameter = new ObjectParameter("TestId", testId);
            }
            else
            {
                testIdParameter = new ObjectParameter("TestId", typeof(global::System.Int32));
            }
    
            ObjectParameter valueParameter;
            if (value != null)
            {
                valueParameter = new ObjectParameter("Value", value);
            }
            else
            {
                valueParameter = new ObjectParameter("Value", typeof(global::System.String));
            }
    
            ObjectParameter instrumentResultIdParameter;
            if (instrumentResultId.HasValue)
            {
                instrumentResultIdParameter = new ObjectParameter("InstrumentResultId", instrumentResultId);
            }
            else
            {
                instrumentResultIdParameter = new ObjectParameter("InstrumentResultId", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("Result", orderNumberParameter, receivedDateParameter, testIdParameter, valueParameter, instrumentResultIdParameter);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="nhmamnnk_LabnetManagerModel", Name="Instrument")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Instrument : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Instrument object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="baudRate">Initial value of the BaudRate property.</param>
        /// <param name="databits">Initial value of the Databits property.</param>
        /// <param name="parity">Initial value of the Parity property.</param>
        /// <param name="stopbit">Initial value of the Stopbit property.</param>
        /// <param name="cOMName">Initial value of the COMName property.</param>
        /// <param name="isActive">Initial value of the IsActive property.</param>
        public static Instrument CreateInstrument(global::System.Int32 id, global::System.String name, global::System.Int32 baudRate, global::System.Int32 databits, global::System.String parity, global::System.String stopbit, global::System.String cOMName, global::System.Boolean isActive)
        {
            Instrument instrument = new Instrument();
            instrument.Id = id;
            instrument.Name = name;
            instrument.BaudRate = baudRate;
            instrument.Databits = databits;
            instrument.Parity = parity;
            instrument.Stopbit = stopbit;
            instrument.COMName = cOMName;
            instrument.IsActive = isActive;
            return instrument;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 BaudRate
        {
            get
            {
                return _BaudRate;
            }
            set
            {
                OnBaudRateChanging(value);
                ReportPropertyChanging("BaudRate");
                _BaudRate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BaudRate");
                OnBaudRateChanged();
            }
        }
        private global::System.Int32 _BaudRate;
        partial void OnBaudRateChanging(global::System.Int32 value);
        partial void OnBaudRateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Databits
        {
            get
            {
                return _Databits;
            }
            set
            {
                OnDatabitsChanging(value);
                ReportPropertyChanging("Databits");
                _Databits = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Databits");
                OnDatabitsChanged();
            }
        }
        private global::System.Int32 _Databits;
        partial void OnDatabitsChanging(global::System.Int32 value);
        partial void OnDatabitsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Parity
        {
            get
            {
                return _Parity;
            }
            set
            {
                OnParityChanging(value);
                ReportPropertyChanging("Parity");
                _Parity = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Parity");
                OnParityChanged();
            }
        }
        private global::System.String _Parity;
        partial void OnParityChanging(global::System.String value);
        partial void OnParityChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Stopbit
        {
            get
            {
                return _Stopbit;
            }
            set
            {
                OnStopbitChanging(value);
                ReportPropertyChanging("Stopbit");
                _Stopbit = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Stopbit");
                OnStopbitChanged();
            }
        }
        private global::System.String _Stopbit;
        partial void OnStopbitChanging(global::System.String value);
        partial void OnStopbitChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String COMName
        {
            get
            {
                return _COMName;
            }
            set
            {
                OnCOMNameChanging(value);
                ReportPropertyChanging("COMName");
                _COMName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("COMName");
                OnCOMNameChanged();
            }
        }
        private global::System.String _COMName;
        partial void OnCOMNameChanging(global::System.String value);
        partial void OnCOMNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private global::System.Boolean _IsActive;
        partial void OnIsActiveChanging(global::System.Boolean value);
        partial void OnIsActiveChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("nhmamnnk_LabnetManagerModel", "FK_InstrumentResult_Instrument", "InstrumentResult")]
        public EntityCollection<InstrumentResult> InstrumentResults
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<InstrumentResult>("nhmamnnk_LabnetManagerModel.FK_InstrumentResult_Instrument", "InstrumentResult");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<InstrumentResult>("nhmamnnk_LabnetManagerModel.FK_InstrumentResult_Instrument", "InstrumentResult", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("nhmamnnk_LabnetManagerModel", "FK_InstrumentTest_Instrument", "InstrumentTest")]
        public EntityCollection<InstrumentTest> InstrumentTests
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<InstrumentTest>("nhmamnnk_LabnetManagerModel.FK_InstrumentTest_Instrument", "InstrumentTest");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<InstrumentTest>("nhmamnnk_LabnetManagerModel.FK_InstrumentTest_Instrument", "InstrumentTest", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="nhmamnnk_LabnetManagerModel", Name="InstrumentResult")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class InstrumentResult : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new InstrumentResult object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="orderNumber">Initial value of the OrderNumber property.</param>
        /// <param name="receivedDate">Initial value of the ReceivedDate property.</param>
        /// <param name="testId">Initial value of the TestId property.</param>
        /// <param name="result">Initial value of the Result property.</param>
        /// <param name="flag">Initial value of the Flag property.</param>
        /// <param name="instrumentId">Initial value of the InstrumentId property.</param>
        public static InstrumentResult CreateInstrumentResult(global::System.Int32 id, global::System.String orderNumber, global::System.DateTime receivedDate, global::System.Int32 testId, global::System.String result, global::System.Boolean flag, global::System.Int32 instrumentId)
        {
            InstrumentResult instrumentResult = new InstrumentResult();
            instrumentResult.Id = id;
            instrumentResult.OrderNumber = orderNumber;
            instrumentResult.ReceivedDate = receivedDate;
            instrumentResult.TestId = testId;
            instrumentResult.Result = result;
            instrumentResult.Flag = flag;
            instrumentResult.InstrumentId = instrumentId;
            return instrumentResult;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String OrderNumber
        {
            get
            {
                return _OrderNumber;
            }
            set
            {
                OnOrderNumberChanging(value);
                ReportPropertyChanging("OrderNumber");
                _OrderNumber = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("OrderNumber");
                OnOrderNumberChanged();
            }
        }
        private global::System.String _OrderNumber;
        partial void OnOrderNumberChanging(global::System.String value);
        partial void OnOrderNumberChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime ReceivedDate
        {
            get
            {
                return _ReceivedDate;
            }
            set
            {
                OnReceivedDateChanging(value);
                ReportPropertyChanging("ReceivedDate");
                _ReceivedDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ReceivedDate");
                OnReceivedDateChanged();
            }
        }
        private global::System.DateTime _ReceivedDate;
        partial void OnReceivedDateChanging(global::System.DateTime value);
        partial void OnReceivedDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TestId
        {
            get
            {
                return _TestId;
            }
            set
            {
                OnTestIdChanging(value);
                ReportPropertyChanging("TestId");
                _TestId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TestId");
                OnTestIdChanged();
            }
        }
        private global::System.Int32 _TestId;
        partial void OnTestIdChanging(global::System.Int32 value);
        partial void OnTestIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Result
        {
            get
            {
                return _Result;
            }
            set
            {
                OnResultChanging(value);
                ReportPropertyChanging("Result");
                _Result = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Result");
                OnResultChanged();
            }
        }
        private global::System.String _Result;
        partial void OnResultChanging(global::System.String value);
        partial void OnResultChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Flag
        {
            get
            {
                return _Flag;
            }
            set
            {
                OnFlagChanging(value);
                ReportPropertyChanging("Flag");
                _Flag = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Flag");
                OnFlagChanged();
            }
        }
        private global::System.Boolean _Flag;
        partial void OnFlagChanging(global::System.Boolean value);
        partial void OnFlagChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String InstrumentPatientId
        {
            get
            {
                return _InstrumentPatientId;
            }
            set
            {
                OnInstrumentPatientIdChanging(value);
                ReportPropertyChanging("InstrumentPatientId");
                _InstrumentPatientId = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("InstrumentPatientId");
                OnInstrumentPatientIdChanged();
            }
        }
        private global::System.String _InstrumentPatientId;
        partial void OnInstrumentPatientIdChanging(global::System.String value);
        partial void OnInstrumentPatientIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 InstrumentId
        {
            get
            {
                return _InstrumentId;
            }
            set
            {
                OnInstrumentIdChanging(value);
                ReportPropertyChanging("InstrumentId");
                _InstrumentId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("InstrumentId");
                OnInstrumentIdChanged();
            }
        }
        private global::System.Int32 _InstrumentId;
        partial void OnInstrumentIdChanging(global::System.Int32 value);
        partial void OnInstrumentIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("nhmamnnk_LabnetManagerModel", "FK_InstrumentResult_Instrument", "Instrument")]
        public Instrument Instrument
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Instrument>("nhmamnnk_LabnetManagerModel.FK_InstrumentResult_Instrument", "Instrument").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Instrument>("nhmamnnk_LabnetManagerModel.FK_InstrumentResult_Instrument", "Instrument").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Instrument> InstrumentReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Instrument>("nhmamnnk_LabnetManagerModel.FK_InstrumentResult_Instrument", "Instrument");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Instrument>("nhmamnnk_LabnetManagerModel.FK_InstrumentResult_Instrument", "Instrument", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("nhmamnnk_LabnetManagerModel", "FK_InstrumentResult_Test", "Test")]
        public Test Test
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Test>("nhmamnnk_LabnetManagerModel.FK_InstrumentResult_Test", "Test").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Test>("nhmamnnk_LabnetManagerModel.FK_InstrumentResult_Test", "Test").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Test> TestReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Test>("nhmamnnk_LabnetManagerModel.FK_InstrumentResult_Test", "Test");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Test>("nhmamnnk_LabnetManagerModel.FK_InstrumentResult_Test", "Test", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="nhmamnnk_LabnetManagerModel", Name="InstrumentTest")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class InstrumentTest : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new InstrumentTest object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="instrumentTestCode">Initial value of the InstrumentTestCode property.</param>
        /// <param name="testId">Initial value of the TestId property.</param>
        /// <param name="instrumentId">Initial value of the InstrumentId property.</param>
        public static InstrumentTest CreateInstrumentTest(global::System.Int32 id, global::System.String instrumentTestCode, global::System.Int32 testId, global::System.Int32 instrumentId)
        {
            InstrumentTest instrumentTest = new InstrumentTest();
            instrumentTest.Id = id;
            instrumentTest.InstrumentTestCode = instrumentTestCode;
            instrumentTest.TestId = testId;
            instrumentTest.InstrumentId = instrumentId;
            return instrumentTest;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String InstrumentTestCode
        {
            get
            {
                return _InstrumentTestCode;
            }
            set
            {
                OnInstrumentTestCodeChanging(value);
                ReportPropertyChanging("InstrumentTestCode");
                _InstrumentTestCode = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("InstrumentTestCode");
                OnInstrumentTestCodeChanged();
            }
        }
        private global::System.String _InstrumentTestCode;
        partial void OnInstrumentTestCodeChanging(global::System.String value);
        partial void OnInstrumentTestCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TestId
        {
            get
            {
                return _TestId;
            }
            set
            {
                OnTestIdChanging(value);
                ReportPropertyChanging("TestId");
                _TestId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TestId");
                OnTestIdChanged();
            }
        }
        private global::System.Int32 _TestId;
        partial void OnTestIdChanging(global::System.Int32 value);
        partial void OnTestIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 InstrumentId
        {
            get
            {
                return _InstrumentId;
            }
            set
            {
                OnInstrumentIdChanging(value);
                ReportPropertyChanging("InstrumentId");
                _InstrumentId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("InstrumentId");
                OnInstrumentIdChanged();
            }
        }
        private global::System.Int32 _InstrumentId;
        partial void OnInstrumentIdChanging(global::System.Int32 value);
        partial void OnInstrumentIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("nhmamnnk_LabnetManagerModel", "FK_InstrumentTest_Instrument", "Instrument")]
        public Instrument Instrument
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Instrument>("nhmamnnk_LabnetManagerModel.FK_InstrumentTest_Instrument", "Instrument").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Instrument>("nhmamnnk_LabnetManagerModel.FK_InstrumentTest_Instrument", "Instrument").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Instrument> InstrumentReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Instrument>("nhmamnnk_LabnetManagerModel.FK_InstrumentTest_Instrument", "Instrument");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Instrument>("nhmamnnk_LabnetManagerModel.FK_InstrumentTest_Instrument", "Instrument", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("nhmamnnk_LabnetManagerModel", "FK_InstrumentTest_Test", "Test")]
        public Test Test
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Test>("nhmamnnk_LabnetManagerModel.FK_InstrumentTest_Test", "Test").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Test>("nhmamnnk_LabnetManagerModel.FK_InstrumentTest_Test", "Test").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Test> TestReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Test>("nhmamnnk_LabnetManagerModel.FK_InstrumentTest_Test", "Test");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Test>("nhmamnnk_LabnetManagerModel.FK_InstrumentTest_Test", "Test", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="nhmamnnk_LabnetManagerModel", Name="Test")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Test : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Test object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="createdBy">Initial value of the CreatedBy property.</param>
        /// <param name="sortOrder">Initial value of the SortOrder property.</param>
        /// <param name="testSectionId">Initial value of the TestSectionId property.</param>
        /// <param name="isActive">Initial value of the IsActive property.</param>
        /// <param name="cost">Initial value of the Cost property.</param>
        /// <param name="isBold">Initial value of the IsBold property.</param>
        public static Test CreateTest(global::System.Int32 id, global::System.String name, global::System.Int32 createdBy, global::System.Int32 sortOrder, global::System.Int32 testSectionId, global::System.Boolean isActive, global::System.Decimal cost, global::System.Boolean isBold)
        {
            Test test = new Test();
            test.Id = id;
            test.Name = name;
            test.CreatedBy = createdBy;
            test.SortOrder = sortOrder;
            test.TestSectionId = testSectionId;
            test.IsActive = isActive;
            test.Cost = cost;
            test.IsBold = isBold;
            return test;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> LowIndex
        {
            get
            {
                return _LowIndex;
            }
            set
            {
                OnLowIndexChanging(value);
                ReportPropertyChanging("LowIndex");
                _LowIndex = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LowIndex");
                OnLowIndexChanged();
            }
        }
        private Nullable<global::System.Double> _LowIndex;
        partial void OnLowIndexChanging(Nullable<global::System.Double> value);
        partial void OnLowIndexChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> HighIndex
        {
            get
            {
                return _HighIndex;
            }
            set
            {
                OnHighIndexChanging(value);
                ReportPropertyChanging("HighIndex");
                _HighIndex = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("HighIndex");
                OnHighIndexChanged();
            }
        }
        private Nullable<global::System.Double> _HighIndex;
        partial void OnHighIndexChanging(Nullable<global::System.Double> value);
        partial void OnHighIndexChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Unit
        {
            get
            {
                return _Unit;
            }
            set
            {
                OnUnitChanging(value);
                ReportPropertyChanging("Unit");
                _Unit = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Unit");
                OnUnitChanged();
            }
        }
        private global::System.String _Unit;
        partial void OnUnitChanging(global::System.String value);
        partial void OnUnitChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Range
        {
            get
            {
                return _Range;
            }
            set
            {
                OnRangeChanging(value);
                ReportPropertyChanging("Range");
                _Range = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Range");
                OnRangeChanged();
            }
        }
        private global::System.String _Range;
        partial void OnRangeChanging(global::System.String value);
        partial void OnRangeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DepartmentId
        {
            get
            {
                return _DepartmentId;
            }
            set
            {
                OnDepartmentIdChanging(value);
                ReportPropertyChanging("DepartmentId");
                _DepartmentId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DepartmentId");
                OnDepartmentIdChanged();
            }
        }
        private Nullable<global::System.Int32> _DepartmentId;
        partial void OnDepartmentIdChanging(Nullable<global::System.Int32> value);
        partial void OnDepartmentIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.Int32 _CreatedBy;
        partial void OnCreatedByChanging(global::System.Int32 value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SortOrder
        {
            get
            {
                return _SortOrder;
            }
            set
            {
                OnSortOrderChanging(value);
                ReportPropertyChanging("SortOrder");
                _SortOrder = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SortOrder");
                OnSortOrderChanged();
            }
        }
        private global::System.Int32 _SortOrder;
        partial void OnSortOrderChanging(global::System.Int32 value);
        partial void OnSortOrderChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TestSectionId
        {
            get
            {
                return _TestSectionId;
            }
            set
            {
                OnTestSectionIdChanging(value);
                ReportPropertyChanging("TestSectionId");
                _TestSectionId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TestSectionId");
                OnTestSectionIdChanged();
            }
        }
        private global::System.Int32 _TestSectionId;
        partial void OnTestSectionIdChanging(global::System.Int32 value);
        partial void OnTestSectionIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ResultType
        {
            get
            {
                return _ResultType;
            }
            set
            {
                OnResultTypeChanging(value);
                ReportPropertyChanging("ResultType");
                _ResultType = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ResultType");
                OnResultTypeChanged();
            }
        }
        private Nullable<global::System.Int32> _ResultType;
        partial void OnResultTypeChanging(Nullable<global::System.Int32> value);
        partial void OnResultTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private global::System.Boolean _IsActive;
        partial void OnIsActiveChanging(global::System.Boolean value);
        partial void OnIsActiveChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> LastUpdated
        {
            get
            {
                return _LastUpdated;
            }
            set
            {
                OnLastUpdatedChanging(value);
                ReportPropertyChanging("LastUpdated");
                _LastUpdated = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LastUpdated");
                OnLastUpdatedChanged();
            }
        }
        private Nullable<global::System.DateTime> _LastUpdated;
        partial void OnLastUpdatedChanging(Nullable<global::System.DateTime> value);
        partial void OnLastUpdatedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal Cost
        {
            get
            {
                return _Cost;
            }
            set
            {
                OnCostChanging(value);
                ReportPropertyChanging("Cost");
                _Cost = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Cost");
                OnCostChanged();
            }
        }
        private global::System.Decimal _Cost;
        partial void OnCostChanging(global::System.Decimal value);
        partial void OnCostChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsBold
        {
            get
            {
                return _IsBold;
            }
            set
            {
                OnIsBoldChanging(value);
                ReportPropertyChanging("IsBold");
                _IsBold = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsBold");
                OnIsBoldChanged();
            }
        }
        private global::System.Boolean _IsBold;
        partial void OnIsBoldChanging(global::System.Boolean value);
        partial void OnIsBoldChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("nhmamnnk_LabnetManagerModel", "FK_InstrumentResult_Test", "InstrumentResult")]
        public EntityCollection<InstrumentResult> InstrumentResults
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<InstrumentResult>("nhmamnnk_LabnetManagerModel.FK_InstrumentResult_Test", "InstrumentResult");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<InstrumentResult>("nhmamnnk_LabnetManagerModel.FK_InstrumentResult_Test", "InstrumentResult", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("nhmamnnk_LabnetManagerModel", "FK_InstrumentTest_Test", "InstrumentTest")]
        public EntityCollection<InstrumentTest> InstrumentTests
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<InstrumentTest>("nhmamnnk_LabnetManagerModel.FK_InstrumentTest_Test", "InstrumentTest");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<InstrumentTest>("nhmamnnk_LabnetManagerModel.FK_InstrumentTest_Test", "InstrumentTest", value);
                }
            }
        }

        #endregion
    }

    #endregion
    #region ComplexTypes
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="nhmamnnk_LabnetManagerModel", Name="GetTestIdByInstrumentAndInstrumentTestCode_Result")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class GetTestIdByInstrumentAndInstrumentTestCode_Result : ComplexObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new GetTestIdByInstrumentAndInstrumentTestCode_Result object.
        /// </summary>
        /// <param name="testId">Initial value of the TestId property.</param>
        public static GetTestIdByInstrumentAndInstrumentTestCode_Result CreateGetTestIdByInstrumentAndInstrumentTestCode_Result(global::System.Int32 testId)
        {
            GetTestIdByInstrumentAndInstrumentTestCode_Result getTestIdByInstrumentAndInstrumentTestCode_Result = new GetTestIdByInstrumentAndInstrumentTestCode_Result();
            getTestIdByInstrumentAndInstrumentTestCode_Result.TestId = testId;
            return getTestIdByInstrumentAndInstrumentTestCode_Result;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TestId
        {
            get
            {
                return _TestId;
            }
            set
            {
                OnTestIdChanging(value);
                ReportPropertyChanging("TestId");
                _TestId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TestId");
                OnTestIdChanged();
            }
        }
        private global::System.Int32 _TestId;
        partial void OnTestIdChanging(global::System.Int32 value);
        partial void OnTestIdChanged();

        #endregion
    }

    #endregion
    
}
